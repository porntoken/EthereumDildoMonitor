logging.level.com.demo=WARN
logging.level.org.springframework.web=INFO
logging.level.org.hibernate=WARN
logging.level.org.springframework.integration.expression.ExpressionUtils=ERROR
logging.level.org.springframework.security=DEBUG
spring.mvc.view.prefix: /WEB-INF/jsp/
spring.mvc.view.suffix: .jsp
spring.profiles.active = local

# PORNTOKEN V2 CONFIG

porntoken.v2.contract.address=0x25c08bb7aa204d221288d9739899f4edf96f5fba

porntoken.v2.etherscan.poll.interval.seconds=15

porntoken.v2.etherscan.api.url=http://api.etherscan.io/api?module=account&action=txlist&address=0x25c08bb7aa204d221288d9739899f4edf96f5fba&startblock=0&endblock=99999999&sort=asc&apikey=

porntoken.v2.etherscan.api.key=YourApiKeyToken

# DATABASE CONFIG

spring.datasource.url = jdbc:mysql://localhost:3306/dildo_monitor?zeroDateTimeBehavior=convertToNull

spring.datasource.driver-class-name=com.mysql.jdbc.Driver

# Username and password
spring.datasource.username = username
spring.datasource.password = password

# Keep the connection alive if idle for a long time (needed in production)
spring.datasource.testWhileIdle = true
spring.datasource.validationQuery = SELECT 1

# ===============================
# = JPA / HIBERNATE
# ===============================

# Use spring.jpa.properties.* for Hibernate native properties (the prefix is
# stripped before adding them to the entity manager).

# Show or not log for each sql query
spring.jpa.show-sql = false

# Hibernate ddl auto (create, create-drop, update): with "update" the database
# schema will be automatically updated accordingly to java entities found in
# the project
spring.jpa.hibernate.ddl-auto = update

# Naming strategy
spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy

# Allows Hibernate to generate SQL optimized for a particular DBMS
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect